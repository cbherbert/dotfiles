; -*-mode: emacs-lisp-*-

;;;
;;  All the settings are managed using use-package.
;;  We first make sure it is installed.
;;  Other packages are installed through use-package if necessary.
;;;
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;;;
;;   Vanilla emacs settings
;;;
(use-package emacs
  :custom
  (fill-column 80)
  (require-final-newline t)
  (vc-follow-symlinks t)
  (calendar-today-visible-hook '(calendar-mark-today))
  (calendar-week-start-day 1)
  ;;(Buffer-menu-name-width 30)
  (eol-mnemonic-dos "\\")
  (eol-mnemonic-mac "/")
  (epg-pinentry-mode 'loopback)
  ;; Compilation mode:
  (compilation-scroll-output 'first-error)
  (recentf-max-menu-items 25)
  (recentf-max-saved-items 25)
  :init
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  ;; Remove trailing whitespace upon saving, except for markdown where two spaces at the end of the line indicate line break:
  (add-hook 'before-save-hook
	    (lambda ()
	      (unless (derived-mode-p 'markdown-mode)
		(delete-trailing-whitespace))))
  ;; Automatically wrap lines for text modes:
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)

  (defun format-sentence-lines ()
    "Break a long line or text block into multiple lines by ending period.
Work on text selection if there is one, else the current text block.
URL `http://ergoemacs.org/emacs/elisp_reformat_to_sentence_lines.html'
Version 2020-12-02 2021-04-14 2021-08-01"
    (interactive)
    (let ($p1 $p2)
      (if (use-region-p)
          (setq $p1 (region-beginning) $p2 (region-end))
	(progn
          (if (re-search-backward "\n[ \t]*\n+" nil "move")
              (progn (re-search-forward "\n[ \t]*\n+")
                     (setq $p1 (point)))
            (setq $p1 (point)))
          (re-search-forward "\n[ \t]*\n" nil "move")
          (setq $p2 (point))))
      (save-restriction
	(narrow-to-region $p1 $p2)
	(progn (goto-char (point-min)) (while (search-forward "\n" nil t) (replace-match " " )))
	(progn (goto-char (point-min)) (while (re-search-forward "  +" nil t) (replace-match " " )))
	(progn (goto-char (point-min)) (while (re-search-forward "\\. +\\([0-9A-Za-z]+\\)" nil t) (replace-match ".\n\\1" )))
	(progn (goto-char (point-min)) (while (search-forward " <a " nil t) (replace-match "\n<a " )))
	(progn (goto-char (point-min)) (while (search-forward "</a>" nil t) (replace-match "</a>\n" )))
	(goto-char (point-max))
	(while (eq (char-before ) 32) (delete-char -1))
	(insert "\n\n"))))

  ;; Line and column numbers:
  ;;(global-linum-mode t)
  ;;(setq linum-format "%6d ")
  (line-number-mode t)
  (column-number-mode t)
  (global-eldoc-mode -1)

  ;; Highlight matching parenthesis
  (show-paren-mode 1)
  (setq show-paren-style 'parenthesis) ; highlight brackets - can also be expression or mixed
  (set-face-background 'show-paren-match (face-background 'default))
  (set-face-foreground 'show-paren-match "magenta")
  (set-face-attribute 'show-paren-match nil :weight 'normal)

  ;; Idutils:
  (autoload 'gid "idutils" nil t)

  ;; Define path to bibtex file for various tools (auctex, org-mode, etc)
  (setq bibtexfile (if (eq system-type 'darwin)
		       '("~/Library/texmf/bibtex/bib/bibtexlib2.bib")
		     '("~/texmf/bibtex/bib/bibtexlib.bib")))

  (recentf-mode 1)

  ;;;
  ;;   Buffers and Windows
  ;;;

  ;; Buffer list
  (defalias 'list-buffers 'ibuffer-other-window)

  ;; Custom automatic window splitting: try to split horizontally first
  (defun split-window-hfirst (&optional window)
    (let ((window (or window (selected-window))))
      (or (and (window-splittable-p window t)
               ;; Split window horizontally.
               (with-selected-window window
		 (split-window-right)))
          (and (window-splittable-p window)
               ;; Split window vertically.
               (with-selected-window window
		 (split-window-below)))
          (and (eq window (frame-root-window (window-frame window)))
               (not (window-minibuffer-p window))
               ;; If WINDOW is the only window on its frame and is not the
               ;; minibuffer window, try to split it horizontally disregarding
               ;; the value of `split-width-threshold'.
               (let ((split-width-threshold 0))
		 (when (window-splittable-p window t)
                   (with-selected-window window
                     (split-window-right))))))))

  (setq split-window-preferred-function 'split-window-hfirst)
  (setq split-width-threshold 190)

  ;; Custom command to rotate windows
  ;; see https://www.emacswiki.org/emacs/TransposeWindows
  (defun rotate-windows (arg)
    "Rotate your windows; use the prefix argument ARG to rotate the other direction."
    (interactive "P")
    (if (not (> (count-windows) 1))
	(message "You can't rotate a single window!")
      (let* ((rotate-times (prefix-numeric-value arg))
             (direction (if (or (< rotate-times 0) (equal arg '(4)))
                            'reverse 'identity)))
	(dotimes (_ (abs rotate-times))
          (dotimes (i (- (count-windows) 1))
            (let* ((w1 (elt (funcall direction (window-list)) i))
                   (w2 (elt (funcall direction (window-list)) (+ i 1)))
                   (b1 (window-buffer w1))
                   (b2 (window-buffer w2))
                   (s1 (window-start w1))
                   (s2 (window-start w2))
                   (p1 (window-point w1))
                   (p2 (window-point w2)))
              (set-window-buffer-start-and-point w1 b2 s2 p2)
              (set-window-buffer-start-and-point w2 b1 s1 p1)))))))

  ; Move through past window configuration:
  (winner-mode 1)

  :bind
  ("C-c r" . 'replace-string)
  ("C-c q" . 'query-replace)
  ("C-c TAB" . 'indent-region)
  ("C-x +" . 'enlarge-window)
  ("C-x -" . 'balance-windows)
  ("C-x ^" . 'shrink-window-if-larger-than-buffer)
  )

;;;
;;    Theme and mode line
;;;
(if (display-graphic-p)
    ;; doom-themes do not appear properly in iTerm.
    ;; therefore, we only use it if running with a GUI
    (progn
      (tool-bar-mode -1)
      (display-time-mode 1)
      (size-indication-mode)
      (use-package doom-themes
	:ensure t
	:config
	(load-theme 'doom-solarized-dark t)
	(setq custom-file "~/.emacs-custom-gui")
	(load custom-file)
	)
      (use-package doom-modeline
	:ensure t
	:hook (after-init . doom-modeline-mode))
      (when (eq system-type 'darwin)
	(set-face-attribute 'default nil :family "Hack")
	;; default font size (point * 10)
	;;
	;; WARNING!  Depending on the default font,
	;; if the size is not supported very well, the frame will be clipped
	;; so that the beginning of the buffer may not be visible correctly.
	(set-face-attribute 'default nil :height 141))
      )
  ;; otherwise, fall back to the 'old' solarized theme
      (use-package color-theme-solarized
	:ensure t
	:custom
	(frame-background-mode 'dark)
	:config
	(load-theme 'solarized t)
	;; Show current function name in mode-line
	(which-function-mode 1)
	(setq custom-file "~/.emacs-custom-terminal")
	(load custom-file)
	))

;;;
;;    Text editing and spelling
;;;
(use-package comint
  :config
  (define-key comint-mode-map [down] 'comint-next-matching-input-from-input)
  (define-key comint-mode-map [up] 'comint-previous-matching-input-from-input)
  )

(use-package flycheck
  :ensure t
  :config
  (setq flycheck-global-modes '(not dir-locals-mode
                                    text-mode
                                    org-mode
                                    vterm-mode))
  (global-flycheck-mode))

(use-package flycheck-aspell
  :ensure t
  :config
  (add-to-list 'flycheck-checkers 'c-aspell-dynamic)
  (add-to-list 'flycheck-checkers 'html-aspell-dynamic)
  (add-to-list 'flycheck-checkers 'mail-aspell-dynamic)
  (add-to-list 'flycheck-checkers 'markdown-aspell-dynamic)
  (add-to-list 'flycheck-checkers 'nroff-aspell-dynamic)
  (add-to-list 'flycheck-checkers 'tex-aspell-dynamic)
  (add-to-list 'flycheck-checkers 'texinfo-aspell-dynamic)
  (add-to-list 'flycheck-checkers 'xml-aspell-dynamic)
  )

(use-package markdown-mode
  :ensure t)

(use-package yaml-mode
  :ensure t)

(use-package csv-mode
  :ensure t
  :mode ("\\.tsv$" . csv-mode)
  :hook ((csv-mode . hl-line-mode)
	 (csv-mode . csv-align-mode))
  )

;; Color dired mode
(use-package diredful
  :ensure t
  :config
  (unless (display-graphic-p)
    (setq diredful-init-file "~/dotfiles/src/diredful-conf.el"))
  (diredful-mode 1)
  )

(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode))

;;;
;;    Completion
;;;
(use-package swiper
  :ensure t
  :custom
  (ivy-use-selectable-prompt t)
  :bind
  ("C-s" . 'swiper-isearch)
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    ))

;; Ivy-based interface to standard commands
;; (global-set-key (kbd "M-x") 'counsel-M-x)
;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
;; (global-set-key (kbd "M-y") 'counsel-yank-pop)
;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
;; (global-set-key (kbd "<f1> l") 'counsel-find-library)
;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
;; (global-set-key (kbd "<f2> j") 'counsel-set-variable)
;; (global-set-key (kbd "C-c v") 'ivy-push-view)
;; (global-set-key (kbd "C-c V") 'ivy-pop-view)

;; Ivy-based interface to shell and system tools
;; (global-set-key (kbd "C-c c") 'counsel-compile)
;; (global-set-key (kbd "C-c g") 'counsel-git)
;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
;; (global-set-key (kbd "C-c L") 'counsel-git-log)
;; (global-set-key (kbd "C-c k") 'counsel-rg)
;; (global-set-key (kbd "C-c m") 'counsel-linux-app)
;; (global-set-key (kbd "C-c n") 'counsel-fzf)
;; (global-set-key (kbd "C-x l") 'counsel-locate)
;; (global-set-key (kbd "C-c J") 'counsel-file-jump)
;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
;; (global-set-key (kbd "C-c w") 'counsel-wmctrl)

;; Ivy-resume and other commands
;; ivy-resume resumes the last Ivy-based completion.
;; (global-set-key (kbd "C-c C-r") 'ivy-resume)
;; (global-set-key (kbd "C-c b") 'counsel-bookmark)
;; (global-set-key (kbd "C-c d") 'counsel-descbinds)
;; (global-set-key (kbd "C-c g") 'counsel-git)
;; (global-set-key (kbd "C-c o") 'counsel-outline)
;; (global-set-key (kbd "C-c t") 'counsel-load-theme)
;; (global-set-key (kbd "C-c F") 'counsel-org-file)

(use-package embark
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
(use-package which-key
  :ensure t
  :config
  (which-key-mode))

;; projectile
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  (setq projectile-completion-system 'ivy)
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map))
  )

(use-package counsel-projectile
  :ensure t
  :config
  (counsel-projectile-mode))

(use-package treemacs
  :ensure t
  :defer t
  :config
  (treemacs-follow-mode t)
  (treemacs-project-follow-mode t)
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t d"   . treemacs-select-directory)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after (treemacs projectile)
  :ensure t)

(use-package treemacs-all-the-icons
  :ensure t
  :config
  (treemacs-load-theme "all-the-icons"))

;;;
;;   AUCTeX
;;;
(use-package auctex
  :ensure t
  :mode (("\\.lbx" . latex-mode) ("\\.bbx" . latex-mode) ("\\.cbx" . latex-mode))
  :hook ((LaTeX-mode . visual-line-mode)
	 (LaTeX-mode . flyspell-mode)
	 (LaTeX-mode . latex-math-mode)
	 (LaTeX-mode . reftex-mode))
  :custom
  (reftex-default-bibliography bibtexfile)
  :config
  (progn
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (setq reftex-plug-into-AUCTeX t)
    (setq TeX-PDF-mode t)
    )
  )

(defun tex-green ()
  (interactive)
  (save-excursion
    (goto-char (region-beginning))
    (insert "\\textcolor{green}{"))
  (goto-char (region-end))
  (insert "}\n"))

;;;
;;   YASnippet
;;;
(use-package yasnippet
  :ensure t
  :config
  (progn
    (yas-global-mode 1)
    (setq yas-wrap-around-region t)
    (setq yas-snippet-dirs (append '("~/dotfiles/src/yas-snippets") yas-snippet-dirs))
    (yas-reload-all)
    )
  )

;;;
;;    Git
;;;
(use-package gitconfig-mode
  :ensure t)

(use-package gitignore-mode
  :ensure t)

(use-package magit
  :ensure t
  :bind ("C-x g" . 'magit-status)
  )

;;;
;;    Programming languages
;;;
(add-to-list 'auto-mode-alist '("\\.fpp" . f90-mode))
(add-to-list 'auto-mode-alist '("\\.f90_*" . f90-mode))
;; Fortran namelist mode:
(when (file-exists-p "~/.emacs.d/f90-namelist-mode/f90-namelist-mode.el")
  (add-to-list 'load-path "~/.emacs.d/f90-namelist-mode/")
  (require 'f90-namelist-mode))


(use-package lua-mode
  :ensure t)

(use-package tuareg
  :ensure t)

(use-package cuda-mode
  :ensure t
  :mode ("\\.hcu" . cuda-mode)
  )

(use-package matlab
  :ensure matlab-mode
  :mode ("\\.m\\'" . matlab-mode)
  :config
  (setq matlab-indent-function t)
  (setq matlab-shell-command "matlab")
  )

;;;
;;  Python
;;;
(use-package pydoc
  :ensure t)
(use-package ein
  :ensure t)
(use-package python-mode
  :ensure t
  :config
  ;; use IPython
  (setq-default py-shell-name "ipython")
  (setq py-force-py-shell-name-p t)
  (setq-default py-which-bufname "IPython")
  ;; use the wx backend, for both mayavi and matplotlib
  (setq py-python-command-args '("--pylab=TkAgg"))
  ;;      '("--gui=wx" "--pylab=wx" "-colors" "Linux"))
  ;; switch to the interpreter after executing code
  (setq py-shell-switch-buffers-on-execute-p t)
  (setq py-switch-buffers-on-execute-p nil)
  ;; split windows
  (setq py-split-windows-on-execute-p t)
  (setq py-split-window-on-execute-threshold 4)
  (setq py-split-windows-on-execute-function 'split-window-horizontally)
  ;; try to automagically figure out indentation
  (setq py-smart-indentation t)
  )


;;;
;;   Org mode
;;;
(use-package org
  :custom
  (org-agenda-files '("~/org/todo.org" "~/org/projects.org"))
  (org-agenda-skip-deadline-prewarning-if-scheduled t)
  (org-agenda-todo-ignore-deadlines 'near)
  (org-agenda-todo-ignore-scheduled 'all)
  ;;(org-cite-global-bibliography '("~/Library/texmf/bibtex/bib/bibtexlib.bib"))
  (org-cite-global-bibliography bibtexfile)
  (org-export-backends '(ascii beamer html icalendar latex man md odt texinfo))
  (org-modules '(org-habit))
  (org-n-level-faces 5)
  (org-todo-keywords
   '((sequence "TODO" "INPROGRESS" "WAIT" "|" "DONE" "CANCELLED")))
  :config
  (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t) (latex . t)))
  (add-to-list 'org-src-lang-modes '("latex" . latex))
  (setq org-startup-indented t)
  (setq org-agenda-custom-commands
	'(("c" "Agenda and TODO by priority"
           ((agenda "")
	    (alltodo ""
		     ((org-agenda-files '("~/org/projects.org"))
		      (org-agenda-overriding-header "Projects:")))
	    (alltodo ""
		     ((org-agenda-files '("~/org/todo.org"))
		      (org-agenda-overriding-header "Tasks:")))))))
  :bind
  (("C-c a" . org-agenda)
   ("C-c c" . org-capture)
   ("C-c l" . org-store-link))
  )

(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(use-package citar
  :ensure t
  :custom
  (org-cite-insert-processor 'citar)
  (org-cite-follow-processor 'citar)
  (org-cite-activate-processor 'citar)
  (citar-bibliography org-cite-global-bibliography)
  ;; optional: org-cite-insert is also bound to C-c C-x C-@
  :config
  ;; note: the symbols defined below are only visible when using vertico as the completion framework
  (setq citar-symbols
	`((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
          (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
          (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " ")))
  (setq citar-symbol-separator "  ")
  (setq citar-at-point-function 'embark-act)
  :bind
  (:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))

(use-package citar-embark
  :ensure t
  :after citar embark
  :config
  (citar-embark-mode)
  )

(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory "~/owncloud/org/roam")
  (org-roam-capture-templates '(
				("d" "default" plain "%?" :target (file+head "${slug}-%<%Y%m%d%H%M%S>.org" "#+title: ${title}\n#+author: Corentin Herbert")
				 :unnarrowed t)
				("b" "book" entry "" :target (file "reads.org") :unnarrowed t)
				))
  :bind
  (("C-c n l" . org-roam-buffer-toggle)
   ("C-c n f" . org-roam-node-find)
   ("C-c n i" . org-roam-node-insert))
  :config
  (org-roam-setup)
  )

(require 'appt)
(appt-activate t)
;; Add org-mode TODOs to appointments: at startup, every day at midnight, and when saving todo file
(org-agenda-to-appt)
(run-at-time "12:05am" (* 24 3600) 'org-agenda-to-appt)
(add-hook 'after-save-hook
          '(lambda ()
             (if (string= (buffer-file-name) (concat (getenv "HOME") "/org/todo.org"))
                 (org-agenda-to-appt))))
;; Display warning in a notification window
(use-package alert
  :ensure t
  :config
  (setq alert-default-style 'notifier)
  (defun appt-alert (min-to-app new-time msg) (alert msg :title "Reminder"))
  (setq appt-disp-window-function 'appt-alert)
  (setq appt-delete-window-function (lambda () t))
  (setq appt-display-mode-line nil)
  ;; Send one persistent warning 5 minutes before the event
  (setq appt-message-warning-time 5)
  (setq appt-display-interval appt-message-warning-time)
  (setq appt-display-duration (* appt-message-warning-time 60))
  (setq alert-fade-time (* appt-message-warning-time 60)))

(use-package try
  :ensure t)
