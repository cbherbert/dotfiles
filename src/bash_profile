# -*- mode: shell-script-*-
#
# This file is loaded by login shells.
# On my machines the terminal emulators run login shells by default.
# This is also the case when logging into a remote machine with ssh.
# However, subshells for instance are not login shells.
# Here I mostly define environment variables, which in any case are passed on to subshells.
# However, these environment variables (including PATH, which is probably the most important),
# are not always accessible from programs which are not started form the terminal (e.g. GUI Emacs
# started from the desktop environment, both in macOS and Linux).
#
# About Emacs:
# Inferior shells in emacs (M-x shell) or terminal emulators (M-x term) do not read this file.
# To solve this problem I have to use a specific package in emacs (exec-path-from-shell) which
# retrieves the environment from a login shell.
# For some reason TRAMP (which is supposed to use /bin/sh) does read this file,
# but it does not seem to understand non-POSIX syntax, or at least not all bash commands.

##
#  First load the generic profile
##

if [ -f "$HOME/.profile" ]; then
    . "$HOME/.profile"
fi

##
#  Environment variables
##

# Language
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# Bash settings: history, globs
export HISTCONTROL=ignorespace:erasedups
export HISTIGNORE="ls:[bf]g:cd:exit:pwd"
export GLOBIGNORE=.:..

# Building the path
if [ "$(uname -s)" = "Darwin" ]; then
    [ -d "/usr/local/sbin" ] && PATH="/usr/local/sbin:$PATH"
    # Macports path for OS X
    [ -d "/opt/local/sbin" ] && PATH="/opt/local/sbin:$PATH"
    [ -d "/opt/local/bin" ] && PATH="/opt/local/bin:$PATH"
    [ -d "/opt/local/libexec/gnubin" ] && PATH="/opt/local/libexec/gnubin:$PATH"
    [ -d "${macportsprefix}/share/man" ] && export MANPATH="${macportsprefix}/share/man:$MANPATH"
    # Homebrew
    if [ -d "/opt/homebrew" ]; then
	export HOMEBREW_PREFIX="/opt/homebrew"
	export HOMEBREW_CELLAR="/opt/homebrew/Cellar"
	export HOMEBREW_REPOSITORY="/opt/homebrew"
	PATH="/opt/homebrew/bin:/opt/homebrew/sbin${PATH+:$PATH}"
	export MANPATH="/opt/homebrew/share/man${MANPATH+:$MANPATH}:"
	export INFOPATH="/opt/homebrew/share/info:${INFOPATH:-}"
    fi
fi
[ -d "${HOME}/bin" ] && PATH="$HOME/bin:${PATH}"
[ -d "${HOME}/scripts" ] && PATH="${HOME}/scripts:${PATH}" # Custom scripts
[ -d "${HOME}/scripts/crypto" ] && PATH="${HOME}/scripts/crypto:${PATH}" # Custom scripts
[ -d "${HOME}/scripts/fms-scripts" ] && PATH="${HOME}/scripts/fms-scripts:${PATH}" # Custom scripts
[ -d "${HOME}/scripts/ghost-scripts" ] && PATH="${HOME}/scripts/ghost-scripts:${PATH}" # Custom scripts
export PATH

# Library path
if [ "$(uname -s)" = "Darwin" ]; then
    LIB_PATH="DYLD_LIBRARY_PATH"
else
    LIB_PATH="LD_LIBRARY_PATH"
fi

# Default programs
export EDITOR="emacs -nw"
if command -v most > /dev/null 2>&1; then export PAGER="most"; else export PAGER="less"; fi
export MOST_INITFILE="${XDG_CONFIG_HOME:-.config}"/mostrc
export MANPAGER="$PAGER"
export BAT_PAGER="less"
export BAT_THEME="Solarized (dark)"
export PASSWORD_STORE_DIR="${XDG_CONFIG_HOME:-.config}/pass"

# The following line is necessary for TRAMP.
# note that M-x shell also has TERM=dumb but not the other terminal emulators
# in any case they do not read this file as they do not run login shells
[ ${TERM} = "dumb" ] && return

##
#  Things to do only if the shell is interactive
##

case $- in
    *i*)
	# Greetings
	# Cyan='\x1B[0;36m'         # Cyan
	# NC="\x1B[m"               # Color Reset
	# echo -e "${Cyan}BASH ${BASH_VERSION%.*} - $(date)${NC}"
	neofetch

	# Source bashrc
	[ -f "$HOME/.bashrc" ] && . "$HOME/.bashrc";;
esac

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
CONDA="$HOME/miniconda3/bin/conda"
__conda_setup="$($CONDA 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$HOME/miniconda3/etc/profile.d/conda.sh" ]; then
        . "$HOME/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="$HOME/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup CONDA
# <<< conda initialize <<<

##
#  iTerm2 shell integration (macOS)
##

if [ -e "${HOME}/.iterm2_shell_integration.bash" ]; then
    . "${HOME}/.iterm2_shell_integration.bash"
fi
